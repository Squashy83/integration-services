/*
 * Integration Services API Documentation
 * This is the API documentation for the Integration Services. Have a look at the repository for examples at [Github](https://github.com/iotaledger/integration-services).             For further information on the Audit Trail GW API have a look at [Audit Trail API](https://github.com/iotaledger/integration-services/blob/master/api/usage-audit-trail-GW.md) and head to             [SSI Bridge](https://github.com/iotaledger/integration-services/blob/master/api/usage-ssi-bridge.md) for information about the SSI Bridge.             
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CreateIdentityBodySchema} from '../model/CreateIdentityBodySchema';
import {ErrorResponseSchema} from '../model/ErrorResponseSchema';
import {IdentityIdSchema} from '../model/IdentityIdSchema';
import {IdentityJsonUpdateSchema} from '../model/IdentityJsonUpdateSchema';
import {IdentitySchema} from '../model/IdentitySchema';

/**
* Identities service.
* @module api/IdentitiesApi
* @version 1.0.0
*/
export class IdentitiesApi {

    /**
    * Constructs a new IdentitiesApi. 
    * @alias module:api/IdentitiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the identitiesCreatePost operation.
     * @callback moduleapi/IdentitiesApi~identitiesCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityJsonUpdateSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new decentralized digital identity (DID)
     * Create a new decentralized digital identity (DID). Identity DID document is signed and published to the ledger (IOTA Tangle). A digital identity can represent an individual, an organization or an object. The privateAuthKey controlling the identity is returned. It is recommended to securely (encrypt) store the privateAuthKey locally, since it is not stored on the APIs Bridge.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateIdentityBodySchema} opts.body 
     * @param {module:api/IdentitiesApi~identitiesCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    identitiesCreatePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentityJsonUpdateSchema;

      return this.apiClient.callApi(
        '/identities/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the identitiesIdentityIdentityIdDelete operation.
     * @callback moduleapi/IdentitiesApi~identitiesIdentityIdentityIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an identity from the Bridge
     * Removes an identity from the Bridge. An identity can only delete itself and is not able to delete other identities. Administrators are able to remove other identities. The identity cannot be removed from the immutable IOTA Tangle but only at the Bridge. Also the identity credentials will remain and the identity is still able to interact with other bridges.
     * @param {module:model/IdentityIdSchema} identityId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.revokeCredentials If true all credentials will be revoked and deleted.
     * @param {Boolean} opts.revokeSubscriptions If true all subscriptions will be revoked and deleted.
     * @param {module:api/IdentitiesApi~identitiesIdentityIdentityIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    identitiesIdentityIdentityIdDelete(identityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling identitiesIdentityIdentityIdDelete");
      }

      let pathParams = {
        'identityId': identityId
      };
      let queryParams = {
        'revoke-credentials': opts['revokeCredentials'],'revoke-subscriptions': opts['revokeSubscriptions']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/identities/identity/{identityId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the identitiesIdentityIdentityIdGet operation.
     * @callback moduleapi/IdentitiesApi~identitiesIdentityIdentityIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentitySchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a specific identity
     * Get information (including attached credentials) about a specific identity using the identity-id (DID identifier).
     * @param {module:model/IdentityIdSchema} identityId 
     * @param {module:api/IdentitiesApi~identitiesIdentityIdentityIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    identitiesIdentityIdentityIdGet(identityId, callback) {
      
      let postBody = null;
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling identitiesIdentityIdentityIdGet");
      }

      let pathParams = {
        'identityId': identityId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IdentitySchema;

      return this.apiClient.callApi(
        '/identities/identity/{identityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the identitiesIdentityPost operation.
     * @callback moduleapi/IdentitiesApi~identitiesIdentityPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentitySchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register an existing identity into the Bridge
     * Register an existing identity into the Bridge. This can be used if the identity already exists or it was only created locally. Registering an identity in the Bridge makes it possible to search for it by using some of the identity attributes, i.e., the username.
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentitySchema} opts.body 
     * @param {module:api/IdentitiesApi~identitiesIdentityPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    identitiesIdentityPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentitySchema;

      return this.apiClient.callApi(
        '/identities/identity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the identitiesIdentityPut operation.
     * @callback moduleapi/IdentitiesApi~identitiesIdentityPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentitySchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update claim of a registered identity
     * Update claim of a registered identity.
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentitySchema} opts.body 
     * @param {module:api/IdentitiesApi~identitiesIdentityPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    identitiesIdentityPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentitySchema;

      return this.apiClient.callApi(
        '/identities/identity', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the identitiesSearchGet operation.
     * @callback moduleapi/IdentitiesApi~identitiesSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentitySchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for identities
     * Search for identities in the system and returns a list of existing identities.
     * @param {Object} opts Optional parameters
     * @param {String} opts.type 
     * @param {String} opts.username 
     * @param {Date} opts.registrationDate 
     * @param {Number} opts.limit 
     * @param {Number} opts.index 
     * @param {module:api/IdentitiesApi~identitiesSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    identitiesSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'type': opts['type'],'username': opts['username'],'registration-date': opts['registrationDate'],'limit': opts['limit'],'index': opts['index']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IdentitySchema;

      return this.apiClient.callApi(
        '/identities/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}