/*
 * Integration Services API Documentation
 * This is the API documentation for the Integration Services. Have a look at the repository for examples at [Github](https://github.com/iotaledger/integration-services).             For further information on the Audit Trail GW API have a look at [Audit Trail API](https://github.com/iotaledger/integration-services/blob/master/api/usage-audit-trail-GW.md) and head to             [SSI Bridge](https://github.com/iotaledger/integration-services/blob/master/api/usage-ssi-bridge.md) for information about the SSI Bridge.             
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AuthorizeSubscriptionBodySchema} from '../model/AuthorizeSubscriptionBodySchema';
import {AuthorizeSubscriptionResponseSchema} from '../model/AuthorizeSubscriptionResponseSchema';
import {ChannelAddressSchema} from '../model/ChannelAddressSchema';
import {ErrorResponseSchema} from '../model/ErrorResponseSchema';
import {IdentityIdSchema} from '../model/IdentityIdSchema';
import {RequestSubscriptionBodySchema} from '../model/RequestSubscriptionBodySchema';
import {RequestSubscriptionResponseSchema} from '../model/RequestSubscriptionResponseSchema';
import {RevokeSubscriptionBodySchema} from '../model/RevokeSubscriptionBodySchema';
import {SubscriptionSchema} from '../model/SubscriptionSchema';
import {SubscriptionUpdateSchema} from '../model/SubscriptionUpdateSchema';

/**
* Subscriptions service.
* @module api/SubscriptionsApi
* @version 1.0.0
*/
export class SubscriptionsApi {

    /**
    * Constructs a new SubscriptionsApi. 
    * @alias module:api/SubscriptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the subscriptionsAuthorizeChannelAddressPost operation.
     * @callback moduleapi/SubscriptionsApi~subscriptionsAuthorizeChannelAddressPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizeSubscriptionResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorize a subscription to a channel
     * Authorize a subscription to a channel with address channel-address. The author of a channel can authorize a subscriber to read/write from a channel. Eventually after verifying its identity (using the Ecommerce-SSI Bridge).
     * @param {module:model/ChannelAddressSchema} channelAddress 
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthorizeSubscriptionBodySchema} opts.body 
     * @param {module:api/SubscriptionsApi~subscriptionsAuthorizeChannelAddressPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    subscriptionsAuthorizeChannelAddressPost(channelAddress, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'channelAddress' is set
      if (channelAddress === undefined || channelAddress === null) {
        throw new Error("Missing the required parameter 'channelAddress' when calling subscriptionsAuthorizeChannelAddressPost");
      }

      let pathParams = {
        'channelAddress': channelAddress
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthorizeSubscriptionResponseSchema;

      return this.apiClient.callApi(
        '/subscriptions/authorize/{channelAddress}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the subscriptionsChannelAddressGet operation.
     * @callback moduleapi/SubscriptionsApi~subscriptionsChannelAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubscriptionSchema>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all subscriptions of a channel.
     * Get all subscriptions of a channel. Use the is-authorized query parameter to filter for authorized subscriptions.
     * @param {module:model/ChannelAddressSchema} channelAddress 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isAuthorized 
     * @param {module:api/SubscriptionsApi~subscriptionsChannelAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    subscriptionsChannelAddressGet(channelAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelAddress' is set
      if (channelAddress === undefined || channelAddress === null) {
        throw new Error("Missing the required parameter 'channelAddress' when calling subscriptionsChannelAddressGet");
      }

      let pathParams = {
        'channelAddress': channelAddress
      };
      let queryParams = {
        'is-authorized': opts['isAuthorized']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SubscriptionSchema];

      return this.apiClient.callApi(
        '/subscriptions/{channelAddress}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the subscriptionsChannelAddressIdentityIdDelete operation.
     * @callback moduleapi/SubscriptionsApi~subscriptionsChannelAddressIdentityIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes subscription
     * Deletes an existing subscription
     * @param {module:model/ChannelAddressSchema} channelAddress 
     * @param {module:model/IdentityIdSchema} identityId 
     * @param {module:api/SubscriptionsApi~subscriptionsChannelAddressIdentityIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscriptionsChannelAddressIdentityIdDelete(channelAddress, identityId, callback) {
      
      let postBody = null;
      // verify the required parameter 'channelAddress' is set
      if (channelAddress === undefined || channelAddress === null) {
        throw new Error("Missing the required parameter 'channelAddress' when calling subscriptionsChannelAddressIdentityIdDelete");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling subscriptionsChannelAddressIdentityIdDelete");
      }

      let pathParams = {
        'channelAddress': channelAddress,'identityId': identityId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/subscriptions/{channelAddress}/{identityId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the subscriptionsChannelAddressIdentityIdGet operation.
     * @callback moduleapi/SubscriptionsApi~subscriptionsChannelAddressIdentityIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a subscription by identity id.
     * Get a subscription of a channel by identity id.
     * @param {module:model/ChannelAddressSchema} channelAddress 
     * @param {module:model/IdentityIdSchema} identityId 
     * @param {module:api/SubscriptionsApi~subscriptionsChannelAddressIdentityIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    subscriptionsChannelAddressIdentityIdGet(channelAddress, identityId, callback) {
      
      let postBody = null;
      // verify the required parameter 'channelAddress' is set
      if (channelAddress === undefined || channelAddress === null) {
        throw new Error("Missing the required parameter 'channelAddress' when calling subscriptionsChannelAddressIdentityIdGet");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling subscriptionsChannelAddressIdentityIdGet");
      }

      let pathParams = {
        'channelAddress': channelAddress,'identityId': identityId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionSchema;

      return this.apiClient.callApi(
        '/subscriptions/{channelAddress}/{identityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the subscriptionsChannelAddressIdentityIdPost operation.
     * @callback moduleapi/SubscriptionsApi~subscriptionsChannelAddressIdentityIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an existing subscription
     * Adds an existing subscription (e.g. the subscription was not created with the api but locally.)
     * @param {module:model/ChannelAddressSchema} channelAddress 
     * @param {module:model/IdentityIdSchema} identityId 
     * @param {Object} opts Optional parameters
     * @param {module:model/SubscriptionSchema} opts.body 
     * @param {module:api/SubscriptionsApi~subscriptionsChannelAddressIdentityIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    subscriptionsChannelAddressIdentityIdPost(channelAddress, identityId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'channelAddress' is set
      if (channelAddress === undefined || channelAddress === null) {
        throw new Error("Missing the required parameter 'channelAddress' when calling subscriptionsChannelAddressIdentityIdPost");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling subscriptionsChannelAddressIdentityIdPost");
      }

      let pathParams = {
        'channelAddress': channelAddress,'identityId': identityId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionSchema;

      return this.apiClient.callApi(
        '/subscriptions/{channelAddress}/{identityId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the subscriptionsChannelAddressIdentityIdPut operation.
     * @callback moduleapi/SubscriptionsApi~subscriptionsChannelAddressIdentityIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing subscription
     * Updates an existing subscription
     * @param {module:model/ChannelAddressSchema} channelAddress 
     * @param {module:model/IdentityIdSchema} identityId 
     * @param {Object} opts Optional parameters
     * @param {module:model/SubscriptionUpdateSchema} opts.body 
     * @param {module:api/SubscriptionsApi~subscriptionsChannelAddressIdentityIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscriptionsChannelAddressIdentityIdPut(channelAddress, identityId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'channelAddress' is set
      if (channelAddress === undefined || channelAddress === null) {
        throw new Error("Missing the required parameter 'channelAddress' when calling subscriptionsChannelAddressIdentityIdPut");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling subscriptionsChannelAddressIdentityIdPut");
      }

      let pathParams = {
        'channelAddress': channelAddress,'identityId': identityId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/subscriptions/{channelAddress}/{identityId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the subscriptionsRequestChannelAddressPost operation.
     * @callback moduleapi/SubscriptionsApi~subscriptionsRequestChannelAddressPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestSubscriptionResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request subscription to a channel
     * Request subscription to a channel with address channel-address. A client can request a subscription to a channel which it then is able to read/write from.
     * @param {module:model/ChannelAddressSchema} channelAddress 
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestSubscriptionBodySchema} opts.body 
     * @param {module:api/SubscriptionsApi~subscriptionsRequestChannelAddressPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    subscriptionsRequestChannelAddressPost(channelAddress, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'channelAddress' is set
      if (channelAddress === undefined || channelAddress === null) {
        throw new Error("Missing the required parameter 'channelAddress' when calling subscriptionsRequestChannelAddressPost");
      }

      let pathParams = {
        'channelAddress': channelAddress
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RequestSubscriptionResponseSchema;

      return this.apiClient.callApi(
        '/subscriptions/request/{channelAddress}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the subscriptionsRevokeChannelAddressPost operation.
     * @callback moduleapi/SubscriptionsApi~subscriptionsRevokeChannelAddressPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke subscription to a channel.
     * Revoke subscription to a channel. Only the author of a channel can revoke a subscription from a channel.
     * @param {module:model/ChannelAddressSchema} channelAddress 
     * @param {Object} opts Optional parameters
     * @param {module:model/RevokeSubscriptionBodySchema} opts.body 
     * @param {module:api/SubscriptionsApi~subscriptionsRevokeChannelAddressPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscriptionsRevokeChannelAddressPost(channelAddress, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'channelAddress' is set
      if (channelAddress === undefined || channelAddress === null) {
        throw new Error("Missing the required parameter 'channelAddress' when calling subscriptionsRevokeChannelAddressPost");
      }

      let pathParams = {
        'channelAddress': channelAddress
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/subscriptions/revoke/{channelAddress}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}