/*
 * Integration Services API Documentation
 * This is the API documentation for the Integration Services. Have a look at the repository for examples at [Github](https://github.com/iotaledger/integration-services).             For further information on the Audit Trail GW API have a look at [Audit Trail API](https://github.com/iotaledger/integration-services/blob/master/api/usage-audit-trail-GW.md) and head to             [SSI Bridge](https://github.com/iotaledger/integration-services/blob/master/api/usage-ssi-bridge.md) for information about the SSI Bridge.             
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AddChannelLogBodySchema} from '../model/AddChannelLogBodySchema';
import {ChannelAddressSchema} from '../model/ChannelAddressSchema';
import {ChannelDataSchema} from '../model/ChannelDataSchema';
import {CreateChannelBodySchema} from '../model/CreateChannelBodySchema';
import {CreateChannelResponseSchema} from '../model/CreateChannelResponseSchema';
import {ErrorResponseSchema} from '../model/ErrorResponseSchema';
import {InlineResponse401} from '../model/InlineResponse401';
import {ReimportBodySchema} from '../model/ReimportBodySchema';
import {ValidateBodySchemaInner} from '../model/ValidateBodySchemaInner';
import {ValidateResponseSchema} from '../model/ValidateResponseSchema';

/**
* Channels service.
* @module api/ChannelsApi
* @version 1.0.0
*/
export class ChannelsApi {

    /**
    * Constructs a new ChannelsApi. 
    * @alias module:api/ChannelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the channelsCreatePost operation.
     * @callback moduleapi/ChannelsApi~channelsCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateChannelResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new channel
     * Create a new channel. An author can create a new channel with specific topics where other clients can subscribe to.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateChannelBodySchema} opts.body 
     * @param {module:api/ChannelsApi~channelsCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    channelsCreatePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateChannelResponseSchema;

      return this.apiClient.callApi(
        '/channels/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the channelsHistoryChannelAddressGet operation.
     * @callback moduleapi/ChannelsApi~channelsHistoryChannelAddressGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the history of a channel.
     * Get all data of a channel using a shared key (in case of encrypted channels). Mainly used from auditors to evaluate a log stream.
     * @param {module:model/ChannelAddressSchema} channelAddress 
     * @param {String} presharedKey Preshared key defined by the author to encrypt/decrypt data.
     * @param {module:api/ChannelsApi~channelsHistoryChannelAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    channelsHistoryChannelAddressGet(channelAddress, presharedKey, callback) {
      
      let postBody = null;
      // verify the required parameter 'channelAddress' is set
      if (channelAddress === undefined || channelAddress === null) {
        throw new Error("Missing the required parameter 'channelAddress' when calling channelsHistoryChannelAddressGet");
      }
      // verify the required parameter 'presharedKey' is set
      if (presharedKey === undefined || presharedKey === null) {
        throw new Error("Missing the required parameter 'presharedKey' when calling channelsHistoryChannelAddressGet");
      }

      let pathParams = {
        'channelAddress': channelAddress
      };
      let queryParams = {
        'preshared-key': presharedKey
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/history/{channelAddress}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the channelsLogsChannelAddressGet operation.
     * @callback moduleapi/ChannelsApi~channelsLogsChannelAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChannelDataSchema>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get data from the channel
     * Get data from the channel with address channel address. The first possible message a subscriber can receive is the time the subscription got approved all messages before are not received. Read permission is mandatory.
     * @param {module:model/ChannelAddressSchema} channelAddress 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.index 
     * @param {Boolean} opts.asc 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/ChannelsApi~channelsLogsChannelAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    channelsLogsChannelAddressGet(channelAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelAddress' is set
      if (channelAddress === undefined || channelAddress === null) {
        throw new Error("Missing the required parameter 'channelAddress' when calling channelsLogsChannelAddressGet");
      }

      let pathParams = {
        'channelAddress': channelAddress
      };
      let queryParams = {
        'limit': opts['limit'],'index': opts['index'],'asc': opts['asc'],'start-date': opts['startDate'],'end-date': opts['endDate']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChannelDataSchema];

      return this.apiClient.callApi(
        '/channels/logs/{channelAddress}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the channelsLogsChannelAddressPost operation.
     * @callback moduleapi/ChannelsApi~channelsLogsChannelAddressPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelDataSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Write data to a channel
     * Write data to a channel with address channel address. Write permission is mandatory. The type and metadata fields are not encrypted to have a possibility to search for events. The payload is stored encrypted for encrypted channels.
     * @param {module:model/ChannelAddressSchema} channelAddress 
     * @param {Object} opts Optional parameters
     * @param {module:model/AddChannelLogBodySchema} opts.body 
     * @param {module:api/ChannelsApi~channelsLogsChannelAddressPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    channelsLogsChannelAddressPost(channelAddress, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'channelAddress' is set
      if (channelAddress === undefined || channelAddress === null) {
        throw new Error("Missing the required parameter 'channelAddress' when calling channelsLogsChannelAddressPost");
      }

      let pathParams = {
        'channelAddress': channelAddress
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChannelDataSchema;

      return this.apiClient.callApi(
        '/channels/logs/{channelAddress}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the channelsReImportChannelAddressPost operation.
     * @callback moduleapi/ChannelsApi~channelsReImportChannelAddressPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Re import the data from the tangle into the database.
     * The user can decide to re-import the data from the Tangle into the database. A reason for it could be a malicious state of the data.
     * @param {module:model/ChannelAddressSchema} channelAddress 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReimportBodySchema} opts.body 
     * @param {module:api/ChannelsApi~channelsReImportChannelAddressPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    channelsReImportChannelAddressPost(channelAddress, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'channelAddress' is set
      if (channelAddress === undefined || channelAddress === null) {
        throw new Error("Missing the required parameter 'channelAddress' when calling channelsReImportChannelAddressPost");
      }

      let pathParams = {
        'channelAddress': channelAddress
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/re-import/{channelAddress}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the channelsValidateChannelAddressPost operation.
     * @callback moduleapi/ChannelsApi~channelsValidateChannelAddressPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidateResponseSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates channel data by comparing the log of each link with the data on the tangle.
     * Validates data of a channel.
     * @param {module:model/ChannelAddressSchema} channelAddress 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ValidateBodySchemaInner>} opts.body 
     * @param {module:api/ChannelsApi~channelsValidateChannelAddressPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    channelsValidateChannelAddressPost(channelAddress, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'channelAddress' is set
      if (channelAddress === undefined || channelAddress === null) {
        throw new Error("Missing the required parameter 'channelAddress' when calling channelsValidateChannelAddressPost");
      }

      let pathParams = {
        'channelAddress': channelAddress
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ValidateResponseSchema;

      return this.apiClient.callApi(
        '/channels/validate/{channelAddress}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}