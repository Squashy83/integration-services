/*
 * Integration Services API Documentation
 * This is the API documentation for the Integration Services. Have a look at the repository for examples at [Github](https://github.com/iotaledger/integration-services).             For further information on the Audit Trail GW API have a look at [Audit Trail API](https://github.com/iotaledger/integration-services/blob/master/api/usage-audit-trail-GW.md) and head to             [SSI Bridge](https://github.com/iotaledger/integration-services/blob/master/api/usage-ssi-bridge.md) for information about the SSI Bridge.             
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ErrorResponseSchema} from '../model/ErrorResponseSchema';
import {IdentityIdSchema} from '../model/IdentityIdSchema';
import {InlineResponse2002} from '../model/InlineResponse2002';
import {InlineResponse2003} from '../model/InlineResponse2003';
import {LatestIdentityJsonSchema} from '../model/LatestIdentityJsonSchema';
import {RevokeVerificationBodySchema} from '../model/RevokeVerificationBodySchema';
import {TrustedRootBodySchema} from '../model/TrustedRootBodySchema';
import {VerifiableCredentialSchema} from '../model/VerifiableCredentialSchema';
import {VerifyIdentityBodySchema} from '../model/VerifyIdentityBodySchema';

/**
* Verification service.
* @module api/VerificationApi
* @version 1.0.0
*/
export class VerificationApi {

    /**
    * Constructs a new VerificationApi. 
    * @alias module:api/VerificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the verificationCheckCredentialPost operation.
     * @callback moduleapi/VerificationApi~verificationCheckCredentialPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the verifiable credential of an identity
     * Check the verifiable credential of an identity. Validates the signed verifiable credential against the Issuer information stored onto the IOTA Tangle and checks if the issuer identity (DID) contained in the credential is from a trusted root.
     * @param {Object} opts Optional parameters
     * @param {module:model/VerifiableCredentialSchema} opts.body 
     * @param {module:api/VerificationApi~verificationCheckCredentialPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    verificationCheckCredentialPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/verification/check-credential', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the verificationCreateCredentialPost operation.
     * @callback moduleapi/VerificationApi~verificationCreateCredentialPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifiableCredentialSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify the authenticity of an identity and issue a credential
     * Verify the authenticity of an identity (of an individual, organization or object) and issue a credential stating the identity verification status. Only previously verified identities (based on a network of trust) with assigned privileges can verify other identities. Having a verified identity provides the opportunity for other identities to identify and verify a the entity they interact to.
     * @param {Object} opts Optional parameters
     * @param {module:model/VerifyIdentityBodySchema} opts.body 
     * @param {module:api/VerificationApi~verificationCreateCredentialPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    verificationCreateCredentialPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifiableCredentialSchema;

      return this.apiClient.callApi(
        '/verification/create-credential', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the verificationLatestDocumentIdentityIdGet operation.
     * @callback moduleapi/VerificationApi~verificationLatestDocumentIdentityIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LatestIdentityJsonSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the latest version of an identity document (DID)
     * Get the latest version of an identity document (DID) from the IOTA Tangle.
     * @param {module:model/IdentityIdSchema} identityId 
     * @param {module:api/VerificationApi~verificationLatestDocumentIdentityIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    verificationLatestDocumentIdentityIdGet(identityId, callback) {
      
      let postBody = null;
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling verificationLatestDocumentIdentityIdGet");
      }

      let pathParams = {
        'identityId': identityId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LatestIdentityJsonSchema;

      return this.apiClient.callApi(
        '/verification/latest-document/{identityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the verificationRevokeCredentialPost operation.
     * @callback moduleapi/VerificationApi~verificationRevokeCredentialPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke one specific verifiable credential of an identity
     * Revoke one specific verifiable credential of an identity. In the case of individual and organization identities the reason could be that the user has left the organization. Only organization admins (with verified identities) or the identity owner itself can do that.
     * @param {Object} opts Optional parameters
     * @param {module:model/RevokeVerificationBodySchema} opts.body 
     * @param {module:api/VerificationApi~verificationRevokeCredentialPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    verificationRevokeCredentialPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/verification/revoke-credential', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the verificationTrustedRootsGet operation.
     * @callback moduleapi/VerificationApi~verificationTrustedRootsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Trusted Root identity identifiers (DIDs)
     * Returns a list of Trusted Root identity identifiers (DIDs). Trusted roots are DIDs of identities which are trusted by the Bridge. This identity DIDs can be DIDs of other organizations. By adding them to the list Trusted Roots their Verifiable Credentials (VCs) are automatically trusted when checking at the Bridge.
     * @param {module:api/VerificationApi~verificationTrustedRootsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    verificationTrustedRootsGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/verification/trusted-roots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the verificationTrustedRootsPost operation.
     * @callback moduleapi/VerificationApi~verificationTrustedRootsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds Trusted Root identity identifiers (DIDs)
     * Adds Trusted Root identity identifiers (DIDs). Trusted roots are DIDs of identities which are trusted by the Bridge. This identity DIDs can be DIDs of other organizations. By adding them to the list Trusted Roots their Verifiable Credentials (VCs) are automatically trusted when checking at the Bridge.
     * @param {Object} opts Optional parameters
     * @param {module:model/TrustedRootBodySchema} opts.body 
     * @param {module:api/VerificationApi~verificationTrustedRootsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    verificationTrustedRootsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/verification/trusted-roots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the verificationTrustedRootsTrustedRootIdDelete operation.
     * @callback moduleapi/VerificationApi~verificationTrustedRootsTrustedRootIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Trusted Root identity identifiers (DIDs)
     * Remove Trusted Root identity identifiers (DIDs). Trusted roots are DIDs of identities which are trusted by the Bridge. This identity DIDs can be DIDs of other organizations. By adding them to the list Trusted Roots their Verifiable Credentials (VCs) are automatically trusted when checking at the Bridge.
     * @param {module:model/IdentityIdSchema} trustedRootId 
     * @param {module:api/VerificationApi~verificationTrustedRootsTrustedRootIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    verificationTrustedRootsTrustedRootIdDelete(trustedRootId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trustedRootId' is set
      if (trustedRootId === undefined || trustedRootId === null) {
        throw new Error("Missing the required parameter 'trustedRootId' when calling verificationTrustedRootsTrustedRootIdDelete");
      }

      let pathParams = {
        'trustedRootId': trustedRootId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/verification/trusted-roots/{trustedRootId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}