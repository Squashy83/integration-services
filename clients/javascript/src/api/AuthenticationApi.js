/*
 * Integration Services API Documentation
 * This is the API documentation for the Integration Services. Have a look at the repository for examples at [Github](https://github.com/iotaledger/integration-services).             For further information on the Audit Trail GW API have a look at [Audit Trail API](https://github.com/iotaledger/integration-services/blob/master/api/usage-audit-trail-GW.md) and head to             [SSI Bridge](https://github.com/iotaledger/integration-services/blob/master/api/usage-ssi-bridge.md) for information about the SSI Bridge.             
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ErrorResponseSchema} from '../model/ErrorResponseSchema';
import {IdentityIdSchema} from '../model/IdentityIdSchema';
import {InlineResponse200} from '../model/InlineResponse200';
import {NonceSchema} from '../model/NonceSchema';
import {ProveOwnershipPostBodySchema} from '../model/ProveOwnershipPostBodySchema';

/**
* Authentication service.
* @module api/AuthenticationApi
* @version 1.0.0
*/
export class AuthenticationApi {

    /**
    * Constructs a new AuthenticationApi. 
    * @alias module:api/AuthenticationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the authenticationProveOwnershipIdentityIdGet operation.
     * @callback moduleapi/AuthenticationApi~authenticationProveOwnershipIdentityIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NonceSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a nonce which must be signed by the private key
     * Request a nonce which must be signed by the private key of the client and send it to /prove-ownership/{identity-id} endpoint via POST. This allows a user to prove ownership of its identity public key.
     * @param {module:model/IdentityIdSchema} identityId 
     * @param {module:api/AuthenticationApi~authenticationProveOwnershipIdentityIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    authenticationProveOwnershipIdentityIdGet(identityId, callback) {
      
      let postBody = null;
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling authenticationProveOwnershipIdentityIdGet");
      }

      let pathParams = {
        'identityId': identityId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NonceSchema;

      return this.apiClient.callApi(
        '/authentication/prove-ownership/{identityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the authenticationProveOwnershipIdentityIdPost operation.
     * @callback moduleapi/AuthenticationApi~authenticationProveOwnershipIdentityIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an authentication token by signing a nonce
     * Get an authentication token by signing a nonce using the private key. If signature is verified, a JWT string will be returned in the response. The nonce can be received from GET /prove-ownership/{identity-id} endpoint. The JWT is used for any future API interaction.
     * @param {module:model/IdentityIdSchema} identityId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProveOwnershipPostBodySchema} opts.body 
     * @param {module:api/AuthenticationApi~authenticationProveOwnershipIdentityIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    authenticationProveOwnershipIdentityIdPost(identityId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling authenticationProveOwnershipIdentityIdPost");
      }

      let pathParams = {
        'identityId': identityId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/authentication/prove-ownership/{identityId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}