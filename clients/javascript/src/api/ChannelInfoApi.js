/*
 * Integration Services API Documentation
 * This is the API documentation for the Integration Services. Have a look at the repository for examples at [Github](https://github.com/iotaledger/integration-services).             For further information on the Audit Trail GW API have a look at [Audit Trail API](https://github.com/iotaledger/integration-services/blob/master/api/usage-audit-trail-GW.md) and head to             [SSI Bridge](https://github.com/iotaledger/integration-services/blob/master/api/usage-ssi-bridge.md) for information about the SSI Bridge.             
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ChannelAddressSchema} from '../model/ChannelAddressSchema';
import {ChannelInfoSchema} from '../model/ChannelInfoSchema';
import {ErrorResponseSchema} from '../model/ErrorResponseSchema';
import {InlineResponse401} from '../model/InlineResponse401';

/**
* ChannelInfo service.
* @module api/ChannelInfoApi
* @version 1.0.0
*/
export class ChannelInfoApi {

    /**
    * Constructs a new ChannelInfoApi. 
    * @alias module:api/ChannelInfoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the channelInfoChannelChannelAddressDelete operation.
     * @callback moduleapi/ChannelInfoApi~channelInfoChannelChannelAddressDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete information of a channel
     * Delete information of a channel with address channel-address. The author of a channel can delete its entry in the database. In this case all subscriptions will be deleted and the channel won’t be found in the system anymore. The data &amp; channel won’t be deleted from the IOTA Tangle since its data is immutable on the tangle!
     * @param {module:model/ChannelAddressSchema} channelAddress 
     * @param {module:api/ChannelInfoApi~channelInfoChannelChannelAddressDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    channelInfoChannelChannelAddressDelete(channelAddress, callback) {
      
      let postBody = null;
      // verify the required parameter 'channelAddress' is set
      if (channelAddress === undefined || channelAddress === null) {
        throw new Error("Missing the required parameter 'channelAddress' when calling channelInfoChannelChannelAddressDelete");
      }

      let pathParams = {
        'channelAddress': channelAddress
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/channel-info/channel/{channelAddress}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the channelInfoChannelChannelAddressGet operation.
     * @callback moduleapi/ChannelInfoApi~channelInfoChannelChannelAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelInfoSchema{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a channel
     * Get information about a channel with address channel-address.
     * @param {module:model/ChannelAddressSchema} channelAddress 
     * @param {module:api/ChannelInfoApi~channelInfoChannelChannelAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    channelInfoChannelChannelAddressGet(channelAddress, callback) {
      
      let postBody = null;
      // verify the required parameter 'channelAddress' is set
      if (channelAddress === undefined || channelAddress === null) {
        throw new Error("Missing the required parameter 'channelAddress' when calling channelInfoChannelChannelAddressGet");
      }

      let pathParams = {
        'channelAddress': channelAddress
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChannelInfoSchema;

      return this.apiClient.callApi(
        '/channel-info/channel/{channelAddress}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the channelInfoChannelPost operation.
     * @callback moduleapi/ChannelInfoApi~channelInfoChannelPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an existing channel into the database
     * Add an existing channel into the database. Clients are able to add existing channels into the database so others can subscribe to them. This will be automatically called when a channel will be created.
     * @param {Object} opts Optional parameters
     * @param {module:model/ChannelInfoSchema} opts.body 
     * @param {module:api/ChannelInfoApi~channelInfoChannelPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    channelInfoChannelPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/channel-info/channel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the channelInfoChannelPut operation.
     * @callback moduleapi/ChannelInfoApi~channelInfoChannelPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update channel information
     * Update channel information. The author of a channel can update topics of a channel.
     * @param {Object} opts Optional parameters
     * @param {module:model/ChannelInfoSchema} opts.body 
     * @param {module:api/ChannelInfoApi~channelInfoChannelPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    channelInfoChannelPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/channel-info/channel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the channelInfoSearchGet operation.
     * @callback moduleapi/ChannelInfoApi~channelInfoSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChannelInfoSchema>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for a channel
     * Search for a channel. A client can search for a channel which it is interested in.
     * @param {Object} opts Optional parameters
     * @param {String} opts.author 
     * @param {String} opts.topicType 
     * @param {String} opts.topicSource 
     * @param {Date} opts.created 
     * @param {Date} opts.latestMessage 
     * @param {Number} opts.limit 
     * @param {Number} opts.index 
     * @param {module:api/ChannelInfoApi~channelInfoSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    channelInfoSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'author': opts['author'],'topic-type': opts['topicType'],'topic-source': opts['topicSource'],'created': opts['created'],'latest-message': opts['latestMessage'],'limit': opts['limit'],'index': opts['index']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKey', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChannelInfoSchema];

      return this.apiClient.callApi(
        '/channel-info/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}