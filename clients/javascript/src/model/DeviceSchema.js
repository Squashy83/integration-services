/*
 * Integration Services API Documentation
 * This is the API documentation for the Integration Services. Have a look at the repository for examples at [Github](https://github.com/iotaledger/integration-services).             For further information on the Audit Trail GW API have a look at [Audit Trail API](https://github.com/iotaledger/integration-services/blob/master/api/usage-audit-trail-GW.md) and head to             [SSI Bridge](https://github.com/iotaledger/integration-services/blob/master/api/usage-ssi-bridge.md) for information about the SSI Bridge.             
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {DeviceSchemaAddress} from './DeviceSchemaAddress';

/**
 * The DeviceSchema model module.
 * @module model/DeviceSchema
 * @version 1.0.0
 */
export class DeviceSchema {
  /**
   * Constructs a new <code>DeviceSchema</code>.
   * Device schema, see the specification at: https://github.com/smart-data-models/dataModel.Device/blob/master/Device/doc/spec.md or https://github.com/smart-data-models/dataModel.Device/blob/master/DeviceModel/doc/spec.md or https://petstore.swagger.io/?url&#x3D;https://smart-data-models.github.io/dataModel.Device/Device/swagger.yaml#/ngsi-ld/get_ngsi_ld_v1_entities
   * @alias module:model/DeviceSchema
   * @class
   * @param category {Array.<String>} 
   * @param controlledProperty {Array.<Object>} 
   */
  constructor(category, controlledProperty) {
    this.category = category;
    this.controlledProperty = controlledProperty;
  }

  /**
   * Constructs a <code>DeviceSchema</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DeviceSchema} obj Optional instance to populate.
   * @return {module:model/DeviceSchema} The populated <code>DeviceSchema</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new DeviceSchema();
      if (data.hasOwnProperty('@context'))
        obj.context = ApiClient.convertToType(data['@context'], 'String');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('alternateName'))
        obj.alternateName = ApiClient.convertToType(data['alternateName'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('url'))
        obj.url = ApiClient.convertToType(data['url'], 'String');
      if (data.hasOwnProperty('image'))
        obj.image = ApiClient.convertToType(data['image'], Object);
      if (data.hasOwnProperty('sameAs'))
        obj.sameAs = ApiClient.convertToType(data['sameAs'], Object);
      if (data.hasOwnProperty('category'))
        obj.category = ApiClient.convertToType(data['category'], ['String']);
      if (data.hasOwnProperty('controlledProperty'))
        obj.controlledProperty = ApiClient.convertToType(data['controlledProperty'], [AnyOfDeviceSchemaControlledPropertyItems]);
      if (data.hasOwnProperty('address'))
        obj.address = DeviceSchemaAddress.constructFromObject(data['address']);
      if (data.hasOwnProperty('batteryLevel'))
        obj.batteryLevel = ApiClient.convertToType(data['batteryLevel'], 'Number');
      if (data.hasOwnProperty('configuration'))
        obj.configuration = ApiClient.convertToType(data['configuration'], Object);
      if (data.hasOwnProperty('controlledAsset'))
        obj.controlledAsset = ApiClient.convertToType(data['controlledAsset'], Object);
      if (data.hasOwnProperty('dataProvider'))
        obj.dataProvider = ApiClient.convertToType(data['dataProvider'], Object);
      if (data.hasOwnProperty('dateFirstUsed'))
        obj.dateFirstUsed = ApiClient.convertToType(data['dateFirstUsed'], 'Date');
      if (data.hasOwnProperty('dateInstalled'))
        obj.dateInstalled = ApiClient.convertToType(data['dateInstalled'], 'Date');
      if (data.hasOwnProperty('dateLastCalibration'))
        obj.dateLastCalibration = ApiClient.convertToType(data['dateLastCalibration'], 'Date');
      if (data.hasOwnProperty('dateLastValueReported'))
        obj.dateLastValueReported = ApiClient.convertToType(data['dateLastValueReported'], 'Date');
      if (data.hasOwnProperty('dateManufacured'))
        obj.dateManufacured = ApiClient.convertToType(data['dateManufacured'], 'Date');
      if (data.hasOwnProperty('deviceState'))
        obj.deviceState = ApiClient.convertToType(data['deviceState'], 'String');
      if (data.hasOwnProperty('direction'))
        obj.direction = ApiClient.convertToType(data['direction'], 'String');
      if (data.hasOwnProperty('distance'))
        obj.distance = ApiClient.convertToType(data['distance'], 'Number');
      if (data.hasOwnProperty('dstAware'))
        obj.dstAware = ApiClient.convertToType(data['dstAware'], 'Boolean');
      if (data.hasOwnProperty('depth'))
        obj.depth = ApiClient.convertToType(data['depth'], 'Number');
      if (data.hasOwnProperty('firmwareVersion'))
        obj.firmwareVersion = ApiClient.convertToType(data['firmwareVersion'], 'String');
      if (data.hasOwnProperty('hardwareVersion'))
        obj.hardwareVersion = ApiClient.convertToType(data['hardwareVersion'], 'String');
      if (data.hasOwnProperty('ipAddress'))
        obj.ipAddress = ApiClient.convertToType(data['ipAddress'], ['String']);
      if (data.hasOwnProperty('location'))
        obj.location = ApiClient.convertToType(data['location'], Object);
      if (data.hasOwnProperty('macAddress'))
        obj.macAddress = ApiClient.convertToType(data['macAddress'], ['String']);
      if (data.hasOwnProperty('mcc'))
        obj.mcc = ApiClient.convertToType(data['mcc'], 'String');
      if (data.hasOwnProperty('mnc'))
        obj.mnc = ApiClient.convertToType(data['mnc'], 'String');
      if (data.hasOwnProperty('osVersion'))
        obj.osVersion = ApiClient.convertToType(data['osVersion'], 'String');
      if (data.hasOwnProperty('owner'))
        obj.owner = ApiClient.convertToType(data['owner'], Object);
      if (data.hasOwnProperty('provider'))
        obj.provider = ApiClient.convertToType(data['provider'], Object);
      if (data.hasOwnProperty('refDeviceModel'))
        obj.refDeviceModel = ApiClient.convertToType(data['refDeviceModel'], Object);
      if (data.hasOwnProperty('relativePosition'))
        obj.relativePosition = ApiClient.convertToType(data['relativePosition'], 'String');
      if (data.hasOwnProperty('rssi'))
        obj.rssi = ApiClient.convertToType(data['rssi'], Object);
      if (data.hasOwnProperty('serialNumber'))
        obj.serialNumber = ApiClient.convertToType(data['serialNumber'], 'String');
      if (data.hasOwnProperty('softwareVersion'))
        obj.softwareVersion = ApiClient.convertToType(data['softwareVersion'], 'String');
      if (data.hasOwnProperty('source'))
        obj.source = ApiClient.convertToType(data['source'], Object);
      if (data.hasOwnProperty('supportedProtocol'))
        obj.supportedProtocol = ApiClient.convertToType(data['supportedProtocol'], 'String');
      if (data.hasOwnProperty('value'))
        obj.value = ApiClient.convertToType(data['value'], Object);
    }
    return obj;
  }
}

/**
 * @member {String} context
 */
DeviceSchema.prototype.context = undefined;

/**
 * @member {String} type
 */
DeviceSchema.prototype.type = undefined;

/**
 * @member {String} alternateName
 */
DeviceSchema.prototype.alternateName = undefined;

/**
 * @member {String} name
 */
DeviceSchema.prototype.name = undefined;

/**
 * @member {String} description
 */
DeviceSchema.prototype.description = undefined;

/**
 * @member {String} url
 */
DeviceSchema.prototype.url = undefined;

/**
 * @member {Object} image
 */
DeviceSchema.prototype.image = undefined;

/**
 * @member {Object} sameAs
 */
DeviceSchema.prototype.sameAs = undefined;

/**
 * @member {Array.<String>} category
 */
DeviceSchema.prototype.category = undefined;

/**
 * @member {Array.<Object>} controlledProperty
 */
DeviceSchema.prototype.controlledProperty = undefined;

/**
 * @member {module:model/DeviceSchemaAddress} address
 */
DeviceSchema.prototype.address = undefined;

/**
 * @member {Number} batteryLevel
 */
DeviceSchema.prototype.batteryLevel = undefined;

/**
 * @member {Object} configuration
 */
DeviceSchema.prototype.configuration = undefined;

/**
 * @member {Object} controlledAsset
 */
DeviceSchema.prototype.controlledAsset = undefined;

/**
 * @member {Object} dataProvider
 */
DeviceSchema.prototype.dataProvider = undefined;

/**
 * @member {Date} dateFirstUsed
 */
DeviceSchema.prototype.dateFirstUsed = undefined;

/**
 * @member {Date} dateInstalled
 */
DeviceSchema.prototype.dateInstalled = undefined;

/**
 * @member {Date} dateLastCalibration
 */
DeviceSchema.prototype.dateLastCalibration = undefined;

/**
 * @member {Date} dateLastValueReported
 */
DeviceSchema.prototype.dateLastValueReported = undefined;

/**
 * @member {Date} dateManufacured
 */
DeviceSchema.prototype.dateManufacured = undefined;

/**
 * @member {String} deviceState
 */
DeviceSchema.prototype.deviceState = undefined;

/**
 * @member {String} direction
 */
DeviceSchema.prototype.direction = undefined;

/**
 * @member {Number} distance
 */
DeviceSchema.prototype.distance = undefined;

/**
 * @member {Boolean} dstAware
 */
DeviceSchema.prototype.dstAware = undefined;

/**
 * @member {Number} depth
 */
DeviceSchema.prototype.depth = undefined;

/**
 * @member {String} firmwareVersion
 */
DeviceSchema.prototype.firmwareVersion = undefined;

/**
 * @member {String} hardwareVersion
 */
DeviceSchema.prototype.hardwareVersion = undefined;

/**
 * @member {Array.<String>} ipAddress
 */
DeviceSchema.prototype.ipAddress = undefined;

/**
 * @member {Object} location
 */
DeviceSchema.prototype.location = undefined;

/**
 * @member {Array.<String>} macAddress
 */
DeviceSchema.prototype.macAddress = undefined;

/**
 * @member {String} mcc
 */
DeviceSchema.prototype.mcc = undefined;

/**
 * @member {String} mnc
 */
DeviceSchema.prototype.mnc = undefined;

/**
 * @member {String} osVersion
 */
DeviceSchema.prototype.osVersion = undefined;

/**
 * @member {Object} owner
 */
DeviceSchema.prototype.owner = undefined;

/**
 * @member {Object} provider
 */
DeviceSchema.prototype.provider = undefined;

/**
 * @member {Object} refDeviceModel
 */
DeviceSchema.prototype.refDeviceModel = undefined;

/**
 * @member {String} relativePosition
 */
DeviceSchema.prototype.relativePosition = undefined;

/**
 * @member {Object} rssi
 */
DeviceSchema.prototype.rssi = undefined;

/**
 * @member {String} serialNumber
 */
DeviceSchema.prototype.serialNumber = undefined;

/**
 * @member {String} softwareVersion
 */
DeviceSchema.prototype.softwareVersion = undefined;

/**
 * @member {Object} source
 */
DeviceSchema.prototype.source = undefined;

/**
 * @member {String} supportedProtocol
 */
DeviceSchema.prototype.supportedProtocol = undefined;

/**
 * @member {Object} value
 */
DeviceSchema.prototype.value = undefined;

