/*
 * Integration Services API Documentation
 * This is the API documentation for the Integration Services. Have a look at the repository for examples at [Github](https://github.com/iotaledger/integration-services).             For further information on the Audit Trail GW API have a look at [Audit Trail API](https://github.com/iotaledger/integration-services/blob/master/api/usage-audit-trail-GW.md) and head to             [SSI Bridge](https://github.com/iotaledger/integration-services/blob/master/api/usage-ssi-bridge.md) for information about the SSI Bridge.             
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The PersonSchema model module.
 * @module model/PersonSchema
 * @version 1.0.0
 */
export class PersonSchema {
  /**
   * Constructs a new <code>PersonSchema</code>.
   * Person schema, see the specification at: https://schema.org/Person
   * @alias module:model/PersonSchema
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>PersonSchema</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PersonSchema} obj Optional instance to populate.
   * @return {module:model/PersonSchema} The populated <code>PersonSchema</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new PersonSchema();
      if (data.hasOwnProperty('@context'))
        obj.context = ApiClient.convertToType(data['@context'], 'String');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('alternateName'))
        obj.alternateName = ApiClient.convertToType(data['alternateName'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('url'))
        obj.url = ApiClient.convertToType(data['url'], 'String');
      if (data.hasOwnProperty('image'))
        obj.image = ApiClient.convertToType(data['image'], Object);
      if (data.hasOwnProperty('sameAs'))
        obj.sameAs = ApiClient.convertToType(data['sameAs'], Object);
      if (data.hasOwnProperty('familyName'))
        obj.familyName = ApiClient.convertToType(data['familyName'], 'String');
      if (data.hasOwnProperty('givenName'))
        obj.givenName = ApiClient.convertToType(data['givenName'], 'String');
      if (data.hasOwnProperty('memberOf'))
        obj.memberOf = ApiClient.convertToType(data['memberOf'], Object);
      if (data.hasOwnProperty('worksFor'))
        obj.worksFor = ApiClient.convertToType(data['worksFor'], Object);
      if (data.hasOwnProperty('address'))
        obj.address = ApiClient.convertToType(data['address'], Object);
      if (data.hasOwnProperty('colleague'))
        obj.colleague = ApiClient.convertToType(data['colleague'], Object);
      if (data.hasOwnProperty('email'))
        obj.email = ApiClient.convertToType(data['email'], 'String');
      if (data.hasOwnProperty('jobTitle'))
        obj.jobTitle = ApiClient.convertToType(data['jobTitle'], 'String');
      if (data.hasOwnProperty('birthDate'))
        obj.birthDate = ApiClient.convertToType(data['birthDate'], 'Date');
      if (data.hasOwnProperty('height'))
        obj.height = ApiClient.convertToType(data['height'], Object);
      if (data.hasOwnProperty('weight'))
        obj.weight = ApiClient.convertToType(data['weight'], Object);
      if (data.hasOwnProperty('gender'))
        obj.gender = ApiClient.convertToType(data['gender'], 'String');
      if (data.hasOwnProperty('nationality'))
        obj.nationality = ApiClient.convertToType(data['nationality'], 'String');
      if (data.hasOwnProperty('telephone'))
        obj.telephone = ApiClient.convertToType(data['telephone'], 'String');
    }
    return obj;
  }
}

/**
 * @member {String} context
 */
PersonSchema.prototype.context = undefined;

/**
 * @member {String} type
 */
PersonSchema.prototype.type = undefined;

/**
 * @member {String} alternateName
 */
PersonSchema.prototype.alternateName = undefined;

/**
 * @member {String} name
 */
PersonSchema.prototype.name = undefined;

/**
 * @member {String} description
 */
PersonSchema.prototype.description = undefined;

/**
 * @member {String} url
 */
PersonSchema.prototype.url = undefined;

/**
 * @member {Object} image
 */
PersonSchema.prototype.image = undefined;

/**
 * @member {Object} sameAs
 */
PersonSchema.prototype.sameAs = undefined;

/**
 * @member {String} familyName
 */
PersonSchema.prototype.familyName = undefined;

/**
 * @member {String} givenName
 */
PersonSchema.prototype.givenName = undefined;

/**
 * @member {Object} memberOf
 */
PersonSchema.prototype.memberOf = undefined;

/**
 * @member {Object} worksFor
 */
PersonSchema.prototype.worksFor = undefined;

/**
 * @member {Object} address
 */
PersonSchema.prototype.address = undefined;

/**
 * @member {Object} colleague
 */
PersonSchema.prototype.colleague = undefined;

/**
 * @member {String} email
 */
PersonSchema.prototype.email = undefined;

/**
 * @member {String} jobTitle
 */
PersonSchema.prototype.jobTitle = undefined;

/**
 * @member {Date} birthDate
 */
PersonSchema.prototype.birthDate = undefined;

/**
 * @member {Object} height
 */
PersonSchema.prototype.height = undefined;

/**
 * @member {Object} weight
 */
PersonSchema.prototype.weight = undefined;

/**
 * @member {String} gender
 */
PersonSchema.prototype.gender = undefined;

/**
 * @member {String} nationality
 */
PersonSchema.prototype.nationality = undefined;

/**
 * @member {String} telephone
 */
PersonSchema.prototype.telephone = undefined;

