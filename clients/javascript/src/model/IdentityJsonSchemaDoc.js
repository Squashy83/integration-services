/*
 * Integration Services API Documentation
 * This is the API documentation for the Integration Services. Have a look at the repository for examples at [Github](https://github.com/iotaledger/integration-services).             For further information on the Audit Trail GW API have a look at [Audit Trail API](https://github.com/iotaledger/integration-services/blob/master/api/usage-audit-trail-GW.md) and head to             [SSI Bridge](https://github.com/iotaledger/integration-services/blob/master/api/usage-ssi-bridge.md) for information about the SSI Bridge.             
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {IdentityJsonSchemaDocProof} from './IdentityJsonSchemaDocProof';
import {IdentityJsonSchemaDocVerificationMethod} from './IdentityJsonSchemaDocVerificationMethod';

/**
 * The IdentityJsonSchemaDoc model module.
 * @module model/IdentityJsonSchemaDoc
 * @version 1.0.0
 */
export class IdentityJsonSchemaDoc {
  /**
   * Constructs a new <code>IdentityJsonSchemaDoc</code>.
   * @alias module:model/IdentityJsonSchemaDoc
   * @class
   * @param id {String} 
   * @param authentication {Array.<module:model/IdentityJsonSchemaDocVerificationMethod>} 
   * @param created {Date} 
   * @param updated {Date} 
   * @param immutable {Boolean} 
   * @param proof {module:model/IdentityJsonSchemaDocProof} 
   */
  constructor(id, authentication, created, updated, immutable, proof) {
    this.id = id;
    this.authentication = authentication;
    this.created = created;
    this.updated = updated;
    this.immutable = immutable;
    this.proof = proof;
  }

  /**
   * Constructs a <code>IdentityJsonSchemaDoc</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IdentityJsonSchemaDoc} obj Optional instance to populate.
   * @return {module:model/IdentityJsonSchemaDoc} The populated <code>IdentityJsonSchemaDoc</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IdentityJsonSchemaDoc();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('verificationMethod'))
        obj.verificationMethod = ApiClient.convertToType(data['verificationMethod'], [IdentityJsonSchemaDocVerificationMethod]);
      if (data.hasOwnProperty('previousMessageId'))
        obj.previousMessageId = ApiClient.convertToType(data['previousMessageId'], 'String');
      if (data.hasOwnProperty('authentication'))
        obj.authentication = ApiClient.convertToType(data['authentication'], [IdentityJsonSchemaDocVerificationMethod]);
      if (data.hasOwnProperty('created'))
        obj.created = ApiClient.convertToType(data['created'], 'Date');
      if (data.hasOwnProperty('updated'))
        obj.updated = ApiClient.convertToType(data['updated'], 'Date');
      if (data.hasOwnProperty('immutable'))
        obj.immutable = ApiClient.convertToType(data['immutable'], 'Boolean');
      if (data.hasOwnProperty('proof'))
        obj.proof = IdentityJsonSchemaDocProof.constructFromObject(data['proof']);
    }
    return obj;
  }
}

/**
 * @member {String} id
 */
IdentityJsonSchemaDoc.prototype.id = undefined;

/**
 * @member {Array.<module:model/IdentityJsonSchemaDocVerificationMethod>} verificationMethod
 */
IdentityJsonSchemaDoc.prototype.verificationMethod = undefined;

/**
 * @member {String} previousMessageId
 */
IdentityJsonSchemaDoc.prototype.previousMessageId = undefined;

/**
 * @member {Array.<module:model/IdentityJsonSchemaDocVerificationMethod>} authentication
 */
IdentityJsonSchemaDoc.prototype.authentication = undefined;

/**
 * @member {Date} created
 */
IdentityJsonSchemaDoc.prototype.created = undefined;

/**
 * @member {Date} updated
 */
IdentityJsonSchemaDoc.prototype.updated = undefined;

/**
 * @member {Boolean} immutable
 */
IdentityJsonSchemaDoc.prototype.immutable = undefined;

/**
 * @member {module:model/IdentityJsonSchemaDocProof} proof
 */
IdentityJsonSchemaDoc.prototype.proof = undefined;

