/*
 * Integration Services API Documentation
 * This is the API documentation for the Integration Services. Have a look at the repository for examples at [Github](https://github.com/iotaledger/integration-services).             For further information on the Audit Trail GW API have a look at [Audit Trail API](https://github.com/iotaledger/integration-services/blob/master/api/usage-audit-trail-GW.md) and head to             [SSI Bridge](https://github.com/iotaledger/integration-services/blob/master/api/usage-ssi-bridge.md) for information about the SSI Bridge.             
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IntegrationServicesApiDocumentation);
  }
}(this, function(expect, IntegrationServicesApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IntegrationServicesApiDocumentation.IdentitiesApi();
  });

  describe('(package)', function() {
    describe('IdentitiesApi', function() {
      describe('identitiesCreatePost', function() {
        it('should call identitiesCreatePost successfully', function(done) {
          // TODO: uncomment, update parameter values for identitiesCreatePost call and complete the assertions
          /*
          var opts = {};

          instance.identitiesCreatePost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IntegrationServicesApiDocumentation.IdentityJsonUpdateSchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('identitiesIdentityIdentityIdDelete', function() {
        it('should call identitiesIdentityIdentityIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for identitiesIdentityIdentityIdDelete call
          /*
          var opts = {};

          instance.identitiesIdentityIdentityIdDelete(identityId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('identitiesIdentityIdentityIdGet', function() {
        it('should call identitiesIdentityIdentityIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for identitiesIdentityIdentityIdGet call and complete the assertions
          /*

          instance.identitiesIdentityIdentityIdGet(identityId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IntegrationServicesApiDocumentation.IdentitySchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('identitiesIdentityPost', function() {
        it('should call identitiesIdentityPost successfully', function(done) {
          // TODO: uncomment, update parameter values for identitiesIdentityPost call and complete the assertions
          /*
          var opts = {};

          instance.identitiesIdentityPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IntegrationServicesApiDocumentation.IdentitySchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('identitiesIdentityPut', function() {
        it('should call identitiesIdentityPut successfully', function(done) {
          // TODO: uncomment, update parameter values for identitiesIdentityPut call and complete the assertions
          /*
          var opts = {};

          instance.identitiesIdentityPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IntegrationServicesApiDocumentation.IdentitySchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('identitiesSearchGet', function() {
        it('should call identitiesSearchGet successfully', function(done) {
          // TODO: uncomment, update parameter values for identitiesSearchGet call and complete the assertions
          /*
          var opts = {};

          instance.identitiesSearchGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IntegrationServicesApiDocumentation.IdentitySchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
