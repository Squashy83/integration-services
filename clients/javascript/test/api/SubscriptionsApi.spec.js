/*
 * Integration Services API Documentation
 * This is the API documentation for the Integration Services. Have a look at the repository for examples at [Github](https://github.com/iotaledger/integration-services).             For further information on the Audit Trail GW API have a look at [Audit Trail API](https://github.com/iotaledger/integration-services/blob/master/api/usage-audit-trail-GW.md) and head to             [SSI Bridge](https://github.com/iotaledger/integration-services/blob/master/api/usage-ssi-bridge.md) for information about the SSI Bridge.             
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IntegrationServicesApiDocumentation);
  }
}(this, function(expect, IntegrationServicesApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IntegrationServicesApiDocumentation.SubscriptionsApi();
  });

  describe('(package)', function() {
    describe('SubscriptionsApi', function() {
      describe('subscriptionsAuthorizeChannelAddressPost', function() {
        it('should call subscriptionsAuthorizeChannelAddressPost successfully', function(done) {
          // TODO: uncomment, update parameter values for subscriptionsAuthorizeChannelAddressPost call and complete the assertions
          /*
          var opts = {};

          instance.subscriptionsAuthorizeChannelAddressPost(channelAddress, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IntegrationServicesApiDocumentation.AuthorizeSubscriptionResponseSchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subscriptionsChannelAddressGet', function() {
        it('should call subscriptionsChannelAddressGet successfully', function(done) {
          // TODO: uncomment, update parameter values for subscriptionsChannelAddressGet call and complete the assertions
          /*
          var opts = {};

          instance.subscriptionsChannelAddressGet(channelAddress, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(IntegrationServicesApiDocumentation.SubscriptionSchema);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subscriptionsChannelAddressIdentityIdDelete', function() {
        it('should call subscriptionsChannelAddressIdentityIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for subscriptionsChannelAddressIdentityIdDelete call
          /*

          instance.subscriptionsChannelAddressIdentityIdDelete(channelAddress, identityId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subscriptionsChannelAddressIdentityIdGet', function() {
        it('should call subscriptionsChannelAddressIdentityIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for subscriptionsChannelAddressIdentityIdGet call and complete the assertions
          /*

          instance.subscriptionsChannelAddressIdentityIdGet(channelAddress, identityId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IntegrationServicesApiDocumentation.SubscriptionSchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subscriptionsChannelAddressIdentityIdPost', function() {
        it('should call subscriptionsChannelAddressIdentityIdPost successfully', function(done) {
          // TODO: uncomment, update parameter values for subscriptionsChannelAddressIdentityIdPost call and complete the assertions
          /*
          var opts = {};

          instance.subscriptionsChannelAddressIdentityIdPost(channelAddress, identityId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IntegrationServicesApiDocumentation.SubscriptionSchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subscriptionsChannelAddressIdentityIdPut', function() {
        it('should call subscriptionsChannelAddressIdentityIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for subscriptionsChannelAddressIdentityIdPut call
          /*
          var opts = {};

          instance.subscriptionsChannelAddressIdentityIdPut(channelAddress, identityId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subscriptionsRequestChannelAddressPost', function() {
        it('should call subscriptionsRequestChannelAddressPost successfully', function(done) {
          // TODO: uncomment, update parameter values for subscriptionsRequestChannelAddressPost call and complete the assertions
          /*
          var opts = {};

          instance.subscriptionsRequestChannelAddressPost(channelAddress, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(IntegrationServicesApiDocumentation.RequestSubscriptionResponseSchema);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subscriptionsRevokeChannelAddressPost', function() {
        it('should call subscriptionsRevokeChannelAddressPost successfully', function(done) {
          // TODO: uncomment, update parameter values for subscriptionsRevokeChannelAddressPost call
          /*
          var opts = {};

          instance.subscriptionsRevokeChannelAddressPost(channelAddress, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
