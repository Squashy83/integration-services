/*
 * Integration Services API Documentation
 * This is the API documentation for the Integration Services. Have a look at the repository for examples at [Github](https://github.com/iotaledger/integration-services).             For further information on the Audit Trail GW API have a look at [Audit Trail API](https://github.com/iotaledger/integration-services/blob/master/api/usage-audit-trail-GW.md) and head to             [SSI Bridge](https://github.com/iotaledger/integration-services/blob/master/api/usage-ssi-bridge.md) for information about the SSI Bridge.             
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IntegrationServicesApiDocumentation);
  }
}(this, function(expect, IntegrationServicesApiDocumentation) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DeviceSchema', function() {
      beforeEach(function() {
        instance = new IntegrationServicesApiDocumentation.DeviceSchema();
      });

      it('should create an instance of DeviceSchema', function() {
        // TODO: update the code to test DeviceSchema
        expect(instance).to.be.a(IntegrationServicesApiDocumentation.DeviceSchema);
      });

      it('should have the property context (base name: "@context")', function() {
        // TODO: update the code to test the property context
        expect(instance).to.have.property('context');
        // expect(instance.context).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property alternateName (base name: "alternateName")', function() {
        // TODO: update the code to test the property alternateName
        expect(instance).to.have.property('alternateName');
        // expect(instance.alternateName).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

      it('should have the property image (base name: "image")', function() {
        // TODO: update the code to test the property image
        expect(instance).to.have.property('image');
        // expect(instance.image).to.be(expectedValueLiteral);
      });

      it('should have the property sameAs (base name: "sameAs")', function() {
        // TODO: update the code to test the property sameAs
        expect(instance).to.have.property('sameAs');
        // expect(instance.sameAs).to.be(expectedValueLiteral);
      });

      it('should have the property category (base name: "category")', function() {
        // TODO: update the code to test the property category
        expect(instance).to.have.property('category');
        // expect(instance.category).to.be(expectedValueLiteral);
      });

      it('should have the property controlledProperty (base name: "controlledProperty")', function() {
        // TODO: update the code to test the property controlledProperty
        expect(instance).to.have.property('controlledProperty');
        // expect(instance.controlledProperty).to.be(expectedValueLiteral);
      });

      it('should have the property address (base name: "address")', function() {
        // TODO: update the code to test the property address
        expect(instance).to.have.property('address');
        // expect(instance.address).to.be(expectedValueLiteral);
      });

      it('should have the property batteryLevel (base name: "batteryLevel")', function() {
        // TODO: update the code to test the property batteryLevel
        expect(instance).to.have.property('batteryLevel');
        // expect(instance.batteryLevel).to.be(expectedValueLiteral);
      });

      it('should have the property configuration (base name: "configuration")', function() {
        // TODO: update the code to test the property configuration
        expect(instance).to.have.property('configuration');
        // expect(instance.configuration).to.be(expectedValueLiteral);
      });

      it('should have the property controlledAsset (base name: "controlledAsset")', function() {
        // TODO: update the code to test the property controlledAsset
        expect(instance).to.have.property('controlledAsset');
        // expect(instance.controlledAsset).to.be(expectedValueLiteral);
      });

      it('should have the property dataProvider (base name: "dataProvider")', function() {
        // TODO: update the code to test the property dataProvider
        expect(instance).to.have.property('dataProvider');
        // expect(instance.dataProvider).to.be(expectedValueLiteral);
      });

      it('should have the property dateFirstUsed (base name: "dateFirstUsed")', function() {
        // TODO: update the code to test the property dateFirstUsed
        expect(instance).to.have.property('dateFirstUsed');
        // expect(instance.dateFirstUsed).to.be(expectedValueLiteral);
      });

      it('should have the property dateInstalled (base name: "dateInstalled")', function() {
        // TODO: update the code to test the property dateInstalled
        expect(instance).to.have.property('dateInstalled');
        // expect(instance.dateInstalled).to.be(expectedValueLiteral);
      });

      it('should have the property dateLastCalibration (base name: "dateLastCalibration")', function() {
        // TODO: update the code to test the property dateLastCalibration
        expect(instance).to.have.property('dateLastCalibration');
        // expect(instance.dateLastCalibration).to.be(expectedValueLiteral);
      });

      it('should have the property dateLastValueReported (base name: "dateLastValueReported")', function() {
        // TODO: update the code to test the property dateLastValueReported
        expect(instance).to.have.property('dateLastValueReported');
        // expect(instance.dateLastValueReported).to.be(expectedValueLiteral);
      });

      it('should have the property dateManufacured (base name: "dateManufacured")', function() {
        // TODO: update the code to test the property dateManufacured
        expect(instance).to.have.property('dateManufacured');
        // expect(instance.dateManufacured).to.be(expectedValueLiteral);
      });

      it('should have the property deviceState (base name: "deviceState")', function() {
        // TODO: update the code to test the property deviceState
        expect(instance).to.have.property('deviceState');
        // expect(instance.deviceState).to.be(expectedValueLiteral);
      });

      it('should have the property direction (base name: "direction")', function() {
        // TODO: update the code to test the property direction
        expect(instance).to.have.property('direction');
        // expect(instance.direction).to.be(expectedValueLiteral);
      });

      it('should have the property distance (base name: "distance")', function() {
        // TODO: update the code to test the property distance
        expect(instance).to.have.property('distance');
        // expect(instance.distance).to.be(expectedValueLiteral);
      });

      it('should have the property dstAware (base name: "dstAware")', function() {
        // TODO: update the code to test the property dstAware
        expect(instance).to.have.property('dstAware');
        // expect(instance.dstAware).to.be(expectedValueLiteral);
      });

      it('should have the property depth (base name: "depth")', function() {
        // TODO: update the code to test the property depth
        expect(instance).to.have.property('depth');
        // expect(instance.depth).to.be(expectedValueLiteral);
      });

      it('should have the property firmwareVersion (base name: "firmwareVersion")', function() {
        // TODO: update the code to test the property firmwareVersion
        expect(instance).to.have.property('firmwareVersion');
        // expect(instance.firmwareVersion).to.be(expectedValueLiteral);
      });

      it('should have the property hardwareVersion (base name: "hardwareVersion")', function() {
        // TODO: update the code to test the property hardwareVersion
        expect(instance).to.have.property('hardwareVersion');
        // expect(instance.hardwareVersion).to.be(expectedValueLiteral);
      });

      it('should have the property ipAddress (base name: "ipAddress")', function() {
        // TODO: update the code to test the property ipAddress
        expect(instance).to.have.property('ipAddress');
        // expect(instance.ipAddress).to.be(expectedValueLiteral);
      });

      it('should have the property location (base name: "location")', function() {
        // TODO: update the code to test the property location
        expect(instance).to.have.property('location');
        // expect(instance.location).to.be(expectedValueLiteral);
      });

      it('should have the property macAddress (base name: "macAddress")', function() {
        // TODO: update the code to test the property macAddress
        expect(instance).to.have.property('macAddress');
        // expect(instance.macAddress).to.be(expectedValueLiteral);
      });

      it('should have the property mcc (base name: "mcc")', function() {
        // TODO: update the code to test the property mcc
        expect(instance).to.have.property('mcc');
        // expect(instance.mcc).to.be(expectedValueLiteral);
      });

      it('should have the property mnc (base name: "mnc")', function() {
        // TODO: update the code to test the property mnc
        expect(instance).to.have.property('mnc');
        // expect(instance.mnc).to.be(expectedValueLiteral);
      });

      it('should have the property osVersion (base name: "osVersion")', function() {
        // TODO: update the code to test the property osVersion
        expect(instance).to.have.property('osVersion');
        // expect(instance.osVersion).to.be(expectedValueLiteral);
      });

      it('should have the property owner (base name: "owner")', function() {
        // TODO: update the code to test the property owner
        expect(instance).to.have.property('owner');
        // expect(instance.owner).to.be(expectedValueLiteral);
      });

      it('should have the property provider (base name: "provider")', function() {
        // TODO: update the code to test the property provider
        expect(instance).to.have.property('provider');
        // expect(instance.provider).to.be(expectedValueLiteral);
      });

      it('should have the property refDeviceModel (base name: "refDeviceModel")', function() {
        // TODO: update the code to test the property refDeviceModel
        expect(instance).to.have.property('refDeviceModel');
        // expect(instance.refDeviceModel).to.be(expectedValueLiteral);
      });

      it('should have the property relativePosition (base name: "relativePosition")', function() {
        // TODO: update the code to test the property relativePosition
        expect(instance).to.have.property('relativePosition');
        // expect(instance.relativePosition).to.be(expectedValueLiteral);
      });

      it('should have the property rssi (base name: "rssi")', function() {
        // TODO: update the code to test the property rssi
        expect(instance).to.have.property('rssi');
        // expect(instance.rssi).to.be(expectedValueLiteral);
      });

      it('should have the property serialNumber (base name: "serialNumber")', function() {
        // TODO: update the code to test the property serialNumber
        expect(instance).to.have.property('serialNumber');
        // expect(instance.serialNumber).to.be(expectedValueLiteral);
      });

      it('should have the property softwareVersion (base name: "softwareVersion")', function() {
        // TODO: update the code to test the property softwareVersion
        expect(instance).to.have.property('softwareVersion');
        // expect(instance.softwareVersion).to.be(expectedValueLiteral);
      });

      it('should have the property source (base name: "source")', function() {
        // TODO: update the code to test the property source
        expect(instance).to.have.property('source');
        // expect(instance.source).to.be(expectedValueLiteral);
      });

      it('should have the property supportedProtocol (base name: "supportedProtocol")', function() {
        // TODO: update the code to test the property supportedProtocol
        expect(instance).to.have.property('supportedProtocol');
        // expect(instance.supportedProtocol).to.be(expectedValueLiteral);
      });

      it('should have the property value (base name: "value")', function() {
        // TODO: update the code to test the property value
        expect(instance).to.have.property('value');
        // expect(instance.value).to.be(expectedValueLiteral);
      });

    });
  });

}));
