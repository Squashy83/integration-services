/*
 * Integration Services API Documentation
 * This is the API documentation for the Integration Services. Have a look at the repository for examples at [Github](https://github.com/iotaledger/integration-services).             For further information on the Audit Trail GW API have a look at [Audit Trail API](https://github.com/iotaledger/integration-services/blob/master/api/usage-audit-trail-GW.md) and head to             [SSI Bridge](https://github.com/iotaledger/integration-services/blob/master/api/usage-ssi-bridge.md) for information about the SSI Bridge.             
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IntegrationServicesApiDocumentation);
  }
}(this, function(expect, IntegrationServicesApiDocumentation) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ChannelInfoSearchSchema', function() {
      beforeEach(function() {
        instance = new IntegrationServicesApiDocumentation.ChannelInfoSearchSchema();
      });

      it('should create an instance of ChannelInfoSearchSchema', function() {
        // TODO: update the code to test ChannelInfoSearchSchema
        expect(instance).to.be.a(IntegrationServicesApiDocumentation.ChannelInfoSearchSchema);
      });

      it('should have the property authorId (base name: "authorId")', function() {
        // TODO: update the code to test the property authorId
        expect(instance).to.have.property('authorId');
        // expect(instance.authorId).to.be(expectedValueLiteral);
      });

      it('should have the property author (base name: "author")', function() {
        // TODO: update the code to test the property author
        expect(instance).to.have.property('author');
        // expect(instance.author).to.be(expectedValueLiteral);
      });

      it('should have the property topicType (base name: "topicType")', function() {
        // TODO: update the code to test the property topicType
        expect(instance).to.have.property('topicType');
        // expect(instance.topicType).to.be(expectedValueLiteral);
      });

      it('should have the property topicSource (base name: "topicSource")', function() {
        // TODO: update the code to test the property topicSource
        expect(instance).to.have.property('topicSource');
        // expect(instance.topicSource).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property latestMessage (base name: "latestMessage")', function() {
        // TODO: update the code to test the property latestMessage
        expect(instance).to.have.property('latestMessage');
        // expect(instance.latestMessage).to.be(expectedValueLiteral);
      });

      it('should have the property limit (base name: "limit")', function() {
        // TODO: update the code to test the property limit
        expect(instance).to.have.property('limit');
        // expect(instance.limit).to.be(expectedValueLiteral);
      });

      it('should have the property index (base name: "index")', function() {
        // TODO: update the code to test the property index
        expect(instance).to.have.property('index');
        // expect(instance.index).to.be(expectedValueLiteral);
      });

    });
  });

}));
