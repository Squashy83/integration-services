/*
 * Integration Services API Documentation
 * This is the API documentation for the Integration Services. Have a look at the repository for examples at [Github](https://github.com/iotaledger/integration-services).             For further information on the Audit Trail GW API have a look at [Audit Trail API](https://github.com/iotaledger/integration-services/blob/master/api/usage-audit-trail-GW.md) and head to             [SSI Bridge](https://github.com/iotaledger/integration-services/blob/master/api/usage-ssi-bridge.md) for information about the SSI Bridge.             
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IntegrationServicesApiDocumentation);
  }
}(this, function(expect, IntegrationServicesApiDocumentation) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ServiceSchema', function() {
      beforeEach(function() {
        instance = new IntegrationServicesApiDocumentation.ServiceSchema();
      });

      it('should create an instance of ServiceSchema', function() {
        // TODO: update the code to test ServiceSchema
        expect(instance).to.be.a(IntegrationServicesApiDocumentation.ServiceSchema);
      });

      it('should have the property context (base name: "@context")', function() {
        // TODO: update the code to test the property context
        expect(instance).to.have.property('context');
        // expect(instance.context).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property alternateName (base name: "alternateName")', function() {
        // TODO: update the code to test the property alternateName
        expect(instance).to.have.property('alternateName');
        // expect(instance.alternateName).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

      it('should have the property image (base name: "image")', function() {
        // TODO: update the code to test the property image
        expect(instance).to.have.property('image');
        // expect(instance.image).to.be(expectedValueLiteral);
      });

      it('should have the property sameAs (base name: "sameAs")', function() {
        // TODO: update the code to test the property sameAs
        expect(instance).to.have.property('sameAs');
        // expect(instance.sameAs).to.be(expectedValueLiteral);
      });

      it('should have the property aggregateRating (base name: "aggregateRating")', function() {
        // TODO: update the code to test the property aggregateRating
        expect(instance).to.have.property('aggregateRating');
        // expect(instance.aggregateRating).to.be(expectedValueLiteral);
      });

      it('should have the property availableChannel (base name: "availableChannel")', function() {
        // TODO: update the code to test the property availableChannel
        expect(instance).to.have.property('availableChannel');
        // expect(instance.availableChannel).to.be(expectedValueLiteral);
      });

      it('should have the property brand (base name: "brand")', function() {
        // TODO: update the code to test the property brand
        expect(instance).to.have.property('brand');
        // expect(instance.brand).to.be(expectedValueLiteral);
      });

      it('should have the property category (base name: "category")', function() {
        // TODO: update the code to test the property category
        expect(instance).to.have.property('category');
        // expect(instance.category).to.be(expectedValueLiteral);
      });

      it('should have the property offers (base name: "offers")', function() {
        // TODO: update the code to test the property offers
        expect(instance).to.have.property('offers');
        // expect(instance.offers).to.be(expectedValueLiteral);
      });

      it('should have the property provider (base name: "provider")', function() {
        // TODO: update the code to test the property provider
        expect(instance).to.have.property('provider');
        // expect(instance.provider).to.be(expectedValueLiteral);
      });

      it('should have the property review (base name: "review")', function() {
        // TODO: update the code to test the property review
        expect(instance).to.have.property('review');
        // expect(instance.review).to.be(expectedValueLiteral);
      });

      it('should have the property serviceOutput (base name: "serviceOutput")', function() {
        // TODO: update the code to test the property serviceOutput
        expect(instance).to.have.property('serviceOutput');
        // expect(instance.serviceOutput).to.be(expectedValueLiteral);
      });

      it('should have the property serviceType (base name: "serviceType")', function() {
        // TODO: update the code to test the property serviceType
        expect(instance).to.have.property('serviceType');
        // expect(instance.serviceType).to.be(expectedValueLiteral);
      });

      it('should have the property termsOfService (base name: "termsOfService")', function() {
        // TODO: update the code to test the property termsOfService
        expect(instance).to.have.property('termsOfService');
        // expect(instance.termsOfService).to.be(expectedValueLiteral);
      });

    });
  });

}));
