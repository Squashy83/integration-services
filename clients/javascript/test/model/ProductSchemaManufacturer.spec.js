/*
 * Integration Services API Documentation
 * This is the API documentation for the Integration Services. Have a look at the repository for examples at [Github](https://github.com/iotaledger/integration-services).             For further information on the Audit Trail GW API have a look at [Audit Trail API](https://github.com/iotaledger/integration-services/blob/master/api/usage-audit-trail-GW.md) and head to             [SSI Bridge](https://github.com/iotaledger/integration-services/blob/master/api/usage-ssi-bridge.md) for information about the SSI Bridge.             
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IntegrationServicesApiDocumentation);
  }
}(this, function(expect, IntegrationServicesApiDocumentation) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ProductSchemaManufacturer', function() {
      beforeEach(function() {
        instance = new IntegrationServicesApiDocumentation.ProductSchemaManufacturer();
      });

      it('should create an instance of ProductSchemaManufacturer', function() {
        // TODO: update the code to test ProductSchemaManufacturer
        expect(instance).to.be.a(IntegrationServicesApiDocumentation.ProductSchemaManufacturer);
      });

      it('should have the property context (base name: "@context")', function() {
        // TODO: update the code to test the property context
        expect(instance).to.have.property('context');
        // expect(instance.context).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property alternateName (base name: "alternateName")', function() {
        // TODO: update the code to test the property alternateName
        expect(instance).to.have.property('alternateName');
        // expect(instance.alternateName).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

      it('should have the property image (base name: "image")', function() {
        // TODO: update the code to test the property image
        expect(instance).to.have.property('image');
        // expect(instance.image).to.be(expectedValueLiteral);
      });

      it('should have the property sameAs (base name: "sameAs")', function() {
        // TODO: update the code to test the property sameAs
        expect(instance).to.have.property('sameAs');
        // expect(instance.sameAs).to.be(expectedValueLiteral);
      });

      it('should have the property brand (base name: "brand")', function() {
        // TODO: update the code to test the property brand
        expect(instance).to.have.property('brand');
        // expect(instance.brand).to.be(expectedValueLiteral);
      });

      it('should have the property address (base name: "address")', function() {
        // TODO: update the code to test the property address
        expect(instance).to.have.property('address');
        // expect(instance.address).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property faxNumber (base name: "faxNumber")', function() {
        // TODO: update the code to test the property faxNumber
        expect(instance).to.have.property('faxNumber');
        // expect(instance.faxNumber).to.be(expectedValueLiteral);
      });

      it('should have the property location (base name: "location")', function() {
        // TODO: update the code to test the property location
        expect(instance).to.have.property('location');
        // expect(instance.location).to.be(expectedValueLiteral);
      });

      it('should have the property slogan (base name: "slogan")', function() {
        // TODO: update the code to test the property slogan
        expect(instance).to.have.property('slogan');
        // expect(instance.slogan).to.be(expectedValueLiteral);
      });

      it('should have the property taxID (base name: "taxID")', function() {
        // TODO: update the code to test the property taxID
        expect(instance).to.have.property('taxID');
        // expect(instance.taxID).to.be(expectedValueLiteral);
      });

      it('should have the property telephone (base name: "telephone")', function() {
        // TODO: update the code to test the property telephone
        expect(instance).to.have.property('telephone');
        // expect(instance.telephone).to.be(expectedValueLiteral);
      });

      it('should have the property vatID (base name: "vatID")', function() {
        // TODO: update the code to test the property vatID
        expect(instance).to.have.property('vatID');
        // expect(instance.vatID).to.be(expectedValueLiteral);
      });

    });
  });

}));
